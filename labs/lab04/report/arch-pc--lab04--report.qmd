---
## Author
author:
  name: Игнатенко Денис Беньяминович
  group: НПИбд-01-25
  email: 1032252476@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчет по лабораторной работе №4"
subtitle: "Архитектура компьютера"
license: "CC BY"
---

# Цель работы

Целью работы является освоение процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# Выполнение лабораторной работы
В @tbl-commands приведены основные команды, используемые при работе с Git и
компиляцией отчетов.

: Основные команды, используемые при выполнении работы {#tbl-commands}

| Команда | Флаги | Описание |
|---------|-------|-----------|
| `nasm` | `-f elf` | Переход в указанный каталог |
|        | `-o file.o` | Указание имени выходного объектного файла|
|        | `-g` |Включение отладочной информации |
|        |`-l list.lst` | Создание файла листинга |
| `ld`   | `-m elf_i386 ` | Сборка для 32-битной архитектуры |
|        | `-o executable_file ` | Указание имени исполняемого файла |

## Программа Hello world!


Рассмотрим пример простой программы на языке ассемблера NASM. Традиционно первая программа выводит приветственное сообщение Hello world! на экран.
Создайте каталог для работы с программами на языке ассемблера NASM:

``` bash
mkdir -p ~/work/arch-pc/lab04
```

Перейдите в созданный каталог

```bash
mkdir -p ~/work/arch-pc/lab04
```

Создадим текстовый файл с именем hello.asm и проверим его наличие

```bash
touch hello.asm
```

Откроем этот файл с помощью любого текстового редактора, например, gedit

```bash
gedit hello.asm
```


Введем в него следующий текст

```asm
; hello.asm
SECTION .data ; Начало секции данных
hello: DB 'Hello world!',10 ; 'Hello world!' плюс
; символ перевода строки
helloLen: EQU $-hello ; Длина строки hello
SECTION .text ; Начало секции кода
GLOBAL _start
_start: ; Точка входа в программу
mov eax,4 ; Системный вызов для записи (sys_write)
mov ebx,1 ; Описатель файла '1' - стандартный вывод
mov ecx,hello ; Адрес строки hello в ecx
mov edx,helloLen ; Размер строки hello
int 80h ; Вызов ядра
mov eax,1 ; Системный вызов для выхода (sys_exit)
mov ebx,0 ; Выход с кодом возврата '0' (без ошибок)
int 80h ; Вызов ядра
```

![Написали программу Hello World](./image/1.png){#fig-001 width=90%}

## Транслятор NASM

NASM превращает текст программы в объектный код. Например, для компиляции приведённого выше текста программы «Hello World» необходимо написать:

```bash
nasm -f elf hello.asm
```

Если текст программы набран без ошибок, то транслятор преобразует текст программы
из файла hello.asm в объектный код, который запишется в файл hello.o. Таким образом,
имена всех файлов получаются из имени входного файла и расширения по умолчанию.
При наличии ошибок объектный файл не создаётся, а после запуска транслятора появятся
сообщения об ошибках или предупреждения.
С помощью команды ls проверьте, что объектный файл был создан. Какое имя имеет
объектный файл?
NASM не запускают без параметров. Ключ -f указывает транслятору, что требуется создать
бинарные файлы в формате ELF. Следует отметить, что формат elf64 позволяет создавать
исполняемый код, работающий под 64-битными версиями Linux. Для 32-битных версий ОС
указываем в качестве формата просто elf.
NASM всегда создаёт выходные файлы в текущем каталоге.

![Превращаем текст программы в объектный код с помощью nasm](./image/2.png){#fig-002 width=90%}

## Расширенный синтаксис командной строки NASM

Полный вариант командной строки nasm выглядит следующим образом:
nasm [-@ косвенный_файл_настроек] [-o объектный_файл] [-f
↪ формат_объектного_файла] [-l листинг] [параметры...] [--] исходный_файл
Выполните следующую команду:

```bash
nasm -o obj.o -f elf -g -l list.lst hello.asm
```

![Используем расширенный синтаксис командной строки nasm](./image/3.png){#fig-003 width=90%}


##  Компоновщик LD

чтобы получить исполняемую программу, объектный файл
необходимо передать на обработку компоновщику:

```bash
ld -m elf_i386 hello.o -o hello
```
С помощью команды ls проверьте, что исполняемый файл hello был создан.
Компоновщик ld не предполагает по умолчанию расширений для файлов, но принято
использовать следующие расширения:
• o – для объектных файлов;
• без расширения – для исполняемых файлов;
• map – для файлов схемы программы;
• lib – для библиотек.
Ключ -o с последующим значением задаёт в данном случае имя создаваемого исполняемого файла.
Выполните следующую команду:

```bash
ld -m elf_i386 obj.o -o main
```

![Выполняем пункт 'Компоновщик LD'](./image/4.png){#fig-004 width=90%}

## Запуск исполняемого файла

Запустить на выполнение созданный исполняемый файл, находящийся в текущем каталоге,
можно, набрав в командной строке:

```bash
./hello
```

![Запускаем исполняемый код](./image/5.png){#fig-005 width=90%}


# Задание для самостоятельной работы

1. В каталоге ~/work/arch-pc/lab04 с помощью команды cp создайте копию файла
hello.asm с именем lab4.asm
2. С помощью любого текстового редактора внесите изменения в текст программы в
файле lab4.asm так, чтобы вместо Hello world! на экран выводилась строка с вашими
фамилией и именем.
3. Оттранслируйте полученный текст программы lab4.asm в объектный файл. Выполните
компоновку объектного файла и запустите получившийся исполняемый файл.
4. Скопируйте файлы hello.asm и lab4.asm в Ваш локальный репозиторий в каталог ~/work/study/2023-2024/"Архитектура компьютера"/arch-pc/labs/lab04/.
Загрузите файлы на Github.

![Копируем файл. Изменяем содержимое и собираем](./image/6.png){#fig-006 width=90%}

![Запускаем](./image/7.png){#fig-007 width=90%}

![Копируем](./image/8.png){#fig-008 width=90%}

# Выводы

В ходе лабораторной работы были освоены основные этапы создания программ на языке ассемблера NASM: написание исходного кода, трансляция с помощью NASM, компоновка объектного файла с использованием ld и запуск исполняемого файла. Были изучены основные директивы ассемблера и системные вызовы Linux для организации ввода-вывода. Полученные навыки позволяют создавать низкоуровневые программы с прямым доступом к системным ресурсам

::: {#refs}
:::
